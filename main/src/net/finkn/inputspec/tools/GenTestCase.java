/*-- $Copyright (c) 2014 Christoffer Fink$

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
package net.finkn.inputspec.tools;

import java.util.Optional;

/**
 * A buildable test case for testing a {@link Generator}.
 * While primarily intended to examine values generated by the {@code next}
 * method of a design space to see what effects various parameter
 * configurations have, this class can be used with any generator.
 * <p>
 * The expected behavior of the generator can be set by adding values that
 * are expected or not expected to be generated.
 * Setting the same kind of test multiple times (multiple calls to
 * {@link #all}, for example) is not allowed.
 * Executing the test case is not allowed if no expectations have been set.
 * <p>
 * This class is immutable.
 *
 * @author Christoffer Fink
 */
public class GenTestCase {

  private static final GenTestCase instance = new GenTestCase(
    Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(),
    Optional.empty(), Optional.empty());
  private static final Object[] dummy = {};

  private final Optional<Generator<Object>> gen;
  private final Optional<Object[]> all;
  private final Optional<Object[]> only;
  private final Optional<Object[]> any;
  private final Optional<Object[]> none;
  private final Optional<Interval[]> intervals;

  private GenTestCase(Optional<Generator<Object>> gen,
      Optional<Object[]> all, Optional<Object[]> only,
      Optional<Object[]> any, Optional<Object[]> none,
      Optional<Interval[]> intervals) {
    this.gen = gen;
    this.all = all;
    this.only = only;
    this.any = any;
    this.none = none;
    this.intervals = intervals;
  }

  public static GenTestCase getInstance() {
    return instance;
  }

  /** Shortcut to {@link #all} and {@link #only}. */
  public GenTestCase expected(Object ... values) {
    return all(values).only(values);
  }
  /** All values are expected to be generated. */
  public GenTestCase all(Object ... values) {
    failIfPresent(all, "Already added an 'all' test.");
    return new GenTestCase(gen, Optional.of(values), only, any, none, intervals);
  }
  /** Only these values are expected to be generated. */
  public GenTestCase only(Object ... values) {
    failIfPresent(only, "Already added an 'only' test.");
    return new GenTestCase(gen, all, Optional.of(values), any, none, intervals);
  }
  /** Any of these values is expected to be generated. */
  public GenTestCase any(Object ... values) {
    failIfPresent(any, "Already added an 'any' test.");
    return new GenTestCase(gen, all, only, Optional.of(values), none, intervals);
  }
  /** None of these values are expected to be generated. */
  public GenTestCase none(Object ... values) {
    failIfPresent(none, "Already added a 'none' test.");
    return new GenTestCase(gen, all, only, any, Optional.of(values), intervals);
  }
  /** All values are expected to be in <em>any</em> of these intervals. */
  public GenTestCase intervals(String ... intervals) {
    failIfPresent(this.intervals, "Already added an 'intervals' test.");
    Interval[] tmp = new Interval[intervals.length];
    for (int i = 0; i < intervals.length; i++) {
      tmp[i] = Interval.valueOf(intervals[i]);
    }
    return new GenTestCase(gen, all, only, any, none, Optional.of(tmp));
  }
  /** Set the generator. */
  public GenTestCase gen(Generator<Object> gen) {
    failIfPresent(this.gen, "Already set a generator.");
    return new GenTestCase(Optional.of(gen), all, only, any, none, intervals);
  }

  /** Check whether any tests have been added. */
  public boolean hasTests() {
    return all.isPresent() || only.isPresent()
      || any.isPresent() || none.isPresent() || intervals.isPresent();
  }

  /**
   * Execute the test.
   * @throws IllegalStateException if there are no tests to run
   */
  public GenTestCase run() {
    if (!gen.isPresent()) {
      throw new IllegalStateException("Generator missing!");
    }
    failUnlessTestsPresent();

    gen.get().generatesAll(all.orElse(dummy));
    if (only.isPresent()) {
      gen.get().generatesOnly(only.get());
    }
    gen.get().generatesAny(any.orElse(dummy));
    gen.get().generatesNone(none.orElse(dummy));
    runIntervalsTest();
    return this;
  }

  private void runIntervalsTest() {
    if (!intervals.isPresent()) {
      return;
    }
    Unit.assertAllMatch(gen.get(), x -> {
      Number n = (Number) x;
      for (Interval interval : intervals.get()) {
        if (interval.contains(n)) {
          return true;
        }
      }
      return false;
    });
  }

  private void failIfPresent(Optional<?> opt, String msg) {
    if (opt.isPresent()) {
      throw new IllegalStateException(msg);
    }
  }

  private void failUnlessTestsPresent() {
    if (!hasTests()) {
      throw new IllegalStateException("Refusing to run empty test.");
    }
  }
}
