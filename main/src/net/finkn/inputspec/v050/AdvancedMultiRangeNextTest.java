/*-- $Copyright (c) 2014 Christoffer Fink$

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
package net.finkn.inputspec.v050;

import net.finkn.inputspec.tools.*;

import org.junit.Test;

/**
 * Examines which values are generated by a Design Space as a function of the
 * parameter configurations. In these tests, the configurations involve
 * expressions rather than simple literals.
 * <p>
 * While exclusive-exclusive multi-range definitions normally end up with only
 * the first range, when expressions are involved, exclusive-exclusive and
 * inclusive-inclusive ranges behave the same way.
 *
 * @author Christoffer Fink
 * @see SimpleMultiRangeNextTest
 * @see AdvancedSingleRangeNextTest
 */
public class AdvancedMultiRangeNextTest {

  private final int iterations = 100;
  private final GenTestCase testCase = GenTestCase.getInstance();

  private final ParamCfg dependee = ParamCfg.builder()
    .id("A").inclMin("10").inclMax("20").build();

  /**
   * When defining multi-ranges using expressions, only the last range is used.
   * This is in contrast with {@link SimpleMultiRangeNextTest#multiExclExcl}.
   * Note that this test is largely orthogonal. It does not depend on
   * references resolving to 0, nor on any peculiarities with ranges.
   */
  @Test
  public void multiRangesWithExpressionsOnlyUseLastRange() throws Throwable {
    ParamCfg dependent = pb()
      .inclMin("(A*0)+1, (A*0)+10, (A*0)+1000, (A*0)+9")
      .inclMax("(A*0)+2, (A*0)+20, (A*0)+9000, (A*0)+9")
      .build();

    test(dependent.getId(), dependee, dependent)
      .expected(9).run();
  }

  // The behavior in this test depends on 3 different bugs(?).
  //
  // 1) DesignSpace.next() does not properly evaluate expressions.
  //    While X is defined to be in [10,20], the expression is evaluated as if
  //    X was 0.
  // 2) When defining multi-ranges containing expressions, the first
  //    three ranges are discarded. So only the last range counts.
  // 3) The maximum legal value is also discarded.
  //
  // So [19,1000] is first reduced to [19,30] by discarding the first three
  // ranges. Then, because 0+9 and 0+10 evaluate to 9 and 10, [19,30] is reduced
  // to [9,10] = {9,10}. The maximum of 9 and 10 is 10. So finally, the set of
  // legal values is {9,10} \ {10} = {9}.
  /**
   * This test demonstrates how some other test results interact to give rise
   * to surprising behavior.
   * <ul>
   *   <li>{@link AdvancedSingleRangeNextTest#referencesResolveToZero}</li>
   *   <li>
   *     {@link SimpleSingleRangeNextTest the maximum legal value is discarded}
   *   </li>
   *   <li>{@link #multiRangesWithExpressionsOnlyUseLastRange}
   * </ul>
   */
  @Test
  public void surprisingInteraction() throws Throwable {
    ParamCfg dependent = pb()
      // [30,100] ∪ [100,400] ∪ [400,1000] ∪ [19,30] = [19,1000]
      .inclMin("A+20, A*10, A*40, A+9")
      .inclMax("A+80, A*20, A*50, A+10")
      .build();

    test(dependent.getId(), dependee, dependent)
      .expected(9).run();
  }

  /**
   * Empty ranges work the same for single and multi-ranges.
   * This test relies on only the last range being in effect, as demonstrated
   * by {@link #multiRangesWithExpressionsOnlyUseLastRange}.
   * @see AdvancedSingleRangeNextTest#limitsAreSwappedForEmptyInclusiveRange
   */
  @Test
  public void emptyRangesAreSwappedJustLikeSingleRange() throws Throwable {
    ParamCfg dependent = pb()
      .exclMin("A+20, A*10, A*40, (A*0)+5")
      .exclMax("A+80, A*20, A*50, (A*0)+1")
      .build();

    test(dependent.getId(), dependee, dependent)
      .expected(1,2,3,4,5,6).run();
  }

  private static ParamCfg.Builder pb() {
    return ParamCfg.builder();
  }
  private GenTestCase test(String id, ParamCfg ... params) throws Throwable {
    DesignSpaceCfg space = DesignSpaceCfg.builder().param(params).build();
    return testCase.gen(Generator
      .fromDesignSpace(space.getDesignSpace(), id).limit(iterations)
    );
  }
}
