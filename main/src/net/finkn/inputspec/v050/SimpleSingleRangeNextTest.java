/*-- $Copyright (c) 2014 Christoffer Fink$

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
package net.finkn.inputspec.v050;

import net.finkn.inputspec.tools.Generator;
import net.finkn.inputspec.tools.ParamCfg;
import net.finkn.inputspec.tools.GenTestCase;

import org.junit.Test;

/**
 * This class examines which values are generated by a Design Space for a
 * single-range absolute parameter definition (no expressions).
 *
 * <h2>Max integer is excluded</h2>
 * When generating values for an integer parameter, the maximum value is never
 * generated. If x is the largest legal value for a given parameter, then x
 * will never be generated.
 * <p>
 * This is consistently the case, with one exception. If the set of legal values
 * is {x}, then x will be generated.
 * <p>
 * Note that the values that are listed as expected are
 * <strong>precisely</strong> those values that are expected. That is, x should
 * be produced <em>if and only if</em> it is among the expected values.
 *
 * @author Christoffer Fink
 * @see MultiRangeMismatchTest
 * @see net.finkn.inputspec.tools.GenTestCase
 */
public class SimpleSingleRangeNextTest {

  // 100 should be more than enough for relatively small ranges.
  // A smaller number will speed up tests, but it also increases the risk
  // of sporadic failures.
  private final int iterations = 100;

  private final GenTestCase testCase = GenTestCase.getInstance();

  private final float fMin = -Float.MIN_VALUE;
  private final float fMax = Float.MIN_VALUE;
  private final double dMin = -Double.MIN_VALUE;
  private final double dMax = Double.MIN_VALUE;

  private final String intMin = "10";
  private final String intMax = "14";
  private final String doubleMin = "" + dMin;
  private final String doubleMax = "" + dMax;
  private final String floatMin = "" + fMin;
  private final String floatMax = "" + fMax;

  /** When using a singleton inclusive range, the max value is included. */
  @Test
  public void inclInclWithSingleValue() throws Throwable {
    test(pb()
        .inclMin("1")
        .inclMax("1"))
      .expected(1).run();
  }

  /** When using a singleton exclusive range, the max value is included. */
  @Test
  public void exclExclWithSingleValue() throws Throwable {
    test(pb()
        .exclMin("0")
        .exclMax("2"))
      .expected(1).run();
  }

  /** When using a singleton mixed range, the max value is included. */
  @Test
  public void inclExclWithSingleValue() throws Throwable {
    test(pb()
        .inclMin("1")
        .exclMax("2"))
      .expected(1).run();
  }

  /** When using a singleton mixed range, the max value is included. */
  @Test
  public void exclInclWithSingleValue() throws Throwable {
    test(pb()
        .exclMin("0")
        .inclMax("1"))
      .expected(1).run();
  }


  /** When using a single range, the max allowed value is ignored. */
  @Test
  public void inclInclMaxIgnored() throws Throwable {
    test(pb()
        .inclMin(intMin)
        .inclMax(intMax))
      .expected(10,11,12,13).run(); // 14 is missing.
  }

  /** When using a single range, the max allowed value is ignored. */
  @Test
  public void exclExclMaxIgnored() throws Throwable {
    test(pb()
        .exclMin(intMin)
        .exclMax(intMax))
      .expected(11,12).run();       // 13 is missing.
  }

  /** When using a single range, the max allowed value is ignored. */
  @Test
  public void inclExclMaxIgnored() throws Throwable {
    test(pb()
        .inclMin(intMin)
        .exclMax(intMax))
      .expected(10,11,12).run();    // 13 is missing.
  }

  /** When using a single range, the max allowed value is ignored. */
  @Test
  public void exclInclMaxIgnored() throws Throwable {
    test(pb()
        .exclMin(intMin)
        .inclMax(intMax))
      .expected(11,12,13).run();    // 14 is missing.
  }

  /** Inclusive range for double includes the limits. */
  @Test
  public void inclusiveDoubleIsInclusive() throws Throwable {
    test(pb()
        .type("double")
        .inclMin(doubleMin)
        .inclMax(doubleMax))
      .expected(dMin, 0.0d, dMax).run();
  }

  /** Exclusive range for double excludes the limits. */
  @Test
  public void exclusiveDoubleIsExclusive() throws Throwable {
    test(pb()
        .type("double")
        .exclMin(doubleMin)
        .exclMax(doubleMax))
      .expected(0.0d).run();        // Limits are indeed exclusive.
  }

  /** Inclusive range for float includes the limits. */
  @Test
  public void inclusiveFloatIsInclusive() throws Throwable {
    test(pb()
        .type("float")
        .inclMin(floatMin)
        .inclMax(floatMax))
      .expected(fMin, 0.0f, fMax).run();
  }

  /** Exclusive range for float <strong>includes</strong> the limits. */
  @Test
  public void exclusiveFloatIsInclusive() throws Throwable {
    test(pb()
        .type("float")
        .exclMin(floatMin)
        .exclMax(floatMax))
      .expected(fMin, 0.0f, fMax).run(); // Limits are NOT exclusive.
  }

  /**
   * Setting max to a value that is outside of the range of the type causes the
   * limit to roll around to min.
   * <strong>Note that the behavior of this test depends on the maximum legal
   * values being ignored, as demonstrated in
   * {@link #inclInclMaxIgnored}, among others.</strong>
   * @see #underflowingMinRollsAroundToMax
   **/
  @Test
  public void overflowingMaxRollsAroundToMin() throws Throwable {
    test(pb()
        .inclMin(Integer.MIN_VALUE)
        .inclMax(((long) Integer.MAX_VALUE) + 3))
      .expected(Integer.MIN_VALUE, Integer.MIN_VALUE + 1).run();
  }

  /**
   * Setting min to a value that is outside of the range of the type causes the
   * limit to roll around to max.
   * <strong>Note that the behavior of this test depends on the maximum legal
   * values being ignored, as demonstrated in
   * {@link #inclInclMaxIgnored}, among others.</strong>
   * @see #overflowingMaxRollsAroundToMin
   **/
  @Test
  public void underflowingMinRollsAroundToMax() throws Throwable {
    test(pb()
        .inclMin(((long) Integer.MIN_VALUE) - 3)
        .inclMax(Integer.MAX_VALUE))
      .expected(Integer.MAX_VALUE - 1, Integer.MAX_VALUE - 2).run();
  }

  /**
   * Defining a boolean parameter using limits is legal but, presumably,
   * inconsequential.
   */
  @Test
  public void boolParamWithLimitsIsLegal() throws Throwable {
    test(pb()
        .type("boolean")
        .inclMin("1")
        .inclMax("3"))
      .expected(true, false).run();
  }

  private static ParamCfg.Builder pb() {
    return ParamCfg.builder();
  }
  private GenTestCase test(ParamCfg.Builder pb) throws Throwable {
    return testCase.gen(Generator.fromParam(pb.build()).limit(iterations));
  }
}
